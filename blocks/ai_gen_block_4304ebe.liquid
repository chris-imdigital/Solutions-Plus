{% doc %}
  @prompt
    Create a before and after image comparison slider that allows customers to drag a slider to reveal differences between two images, the scaling and image sizing is a bit wonky, fix this so it's more consistent


{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-image-compare-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 100%;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-image-compare-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
    overflow: hidden;
  }

  .ai-image-compare-before-{{ ai_gen_id }},
  .ai-image-compare-after-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .ai-image-compare-before-{{ ai_gen_id }} {
    z-index: 1;
    width: 50%;
  }

  .ai-image-compare-before-{{ ai_gen_id }} img,
  .ai-image-compare-after-{{ ai_gen_id }} img {
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-image-compare-before-{{ ai_gen_id }} img {
    width: calc(100% / (var(--clip-position, 50) / 100));
    max-width: none;
  }

  .ai-image-compare-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: {{ block.settings.placeholder_bg_color }};
  }

  .ai-image-compare-placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    opacity: 0.5;
  }

  .ai-image-compare-slider-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 50%;
    width: {{ block.settings.slider_width }}px;
    height: 100%;
    background-color: {{ block.settings.slider_color }};
    z-index: 2;
    transform: translateX(-50%);
    cursor: ew-resize;
  }

  .ai-image-compare-handle-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    width: {{ block.settings.handle_size }}px;
    height: {{ block.settings.handle_size }}px;
    border-radius: 50%;
    background-color: {{ block.settings.handle_color }};
    transform: translate(-50%, -50%);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-image-compare-handle-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    color: {{ block.settings.handle_icon_color }};
  }

  .ai-image-compare-labels-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
    pointer-events: none;
  }

  .ai-image-compare-label-{{ ai_gen_id }} {
    position: absolute;
    top: {{ block.settings.label_position }}%;
    background-color: {{ block.settings.label_bg_color }};
    color: {{ block.settings.label_text_color }};
    padding: 5px 10px;
    border-radius: 4px;
    font-size: {{ block.settings.label_font_size }}px;
    font-weight: 500;
    opacity: {{ block.settings.label_opacity }};
  }

  .ai-image-compare-label-before-{{ ai_gen_id }} {
    left: 15px;
  }

  .ai-image-compare-label-after-{{ ai_gen_id }} {
    right: 15px;
  }

  @media screen and (max-width: 749px) {
    .ai-image-compare-label-{{ ai_gen_id }} {
      font-size: {{ block.settings.label_font_size | minus: 2 }}px;
      padding: 4px 8px;
    }
    
    .ai-image-compare-handle-{{ ai_gen_id }} {
      width: {{ block.settings.handle_size | minus: 6 }}px;
      height: {{ block.settings.handle_size | minus: 6 }}px;
    }
  }
{% endstyle %}

<image-comparison-{{ ai_gen_id }} 
  class="ai-image-compare-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-image-compare-wrapper-{{ ai_gen_id }}">
    <div class="ai-image-compare-after-{{ ai_gen_id }}">
      {% if block.settings.after_image %}
        <img 
          src="{{ block.settings.after_image | image_url: width: 2000 }}" 
          alt="{{ block.settings.after_image.alt | escape | default: block.settings.after_label }}"
          loading="lazy"
          width="{{ block.settings.after_image.width }}"
          height="{{ block.settings.after_image.height }}"
        >
      {% else %}
        <div class="ai-image-compare-placeholder-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}
        </div>
      {% endif %}
    </div>
    
    <div class="ai-image-compare-before-{{ ai_gen_id }}">
      {% if block.settings.before_image %}
        <img 
          src="{{ block.settings.before_image | image_url: width: 2000 }}" 
          alt="{{ block.settings.before_image.alt | escape | default: block.settings.before_label }}"
          loading="lazy"
          width="{{ block.settings.before_image.width }}"
          height="{{ block.settings.before_image.height }}"
        >
      {% else %}
        <div class="ai-image-compare-placeholder-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}
        </div>
      {% endif %}
    </div>
    
    <div class="ai-image-compare-slider-{{ ai_gen_id }}" role="slider" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" tabindex="0">
      <div class="ai-image-compare-handle-{{ ai_gen_id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
          <polyline points="9 18 3 12 9 6"></polyline>
        </svg>
      </div>
    </div>
    
    {% if block.settings.show_labels %}
      <div class="ai-image-compare-labels-{{ ai_gen_id }}">
        <div class="ai-image-compare-label-{{ ai_gen_id }} ai-image-compare-label-before-{{ ai_gen_id }}">
          {{ block.settings.before_label }}
        </div>
        <div class="ai-image-compare-label-{{ ai_gen_id }} ai-image-compare-label-after-{{ ai_gen_id }}">
          {{ block.settings.after_label }}
        </div>
      </div>
    {% endif %}
  </div>
</image-comparison-{{ ai_gen_id }}>

<script>
  (function() {
    class ImageComparison extends HTMLElement {
      constructor() {
        super();
        this.slider = this.querySelector('.ai-image-compare-slider-{{ ai_gen_id }}');
        this.beforeImage = this.querySelector('.ai-image-compare-before-{{ ai_gen_id }}');
        this.beforeImageElement = this.querySelector('.ai-image-compare-before-{{ ai_gen_id }} img');
        this.wrapper = this.querySelector('.ai-image-compare-wrapper-{{ ai_gen_id }}');
        this.isDragging = false;
        
        this.onPointerDown = this.onPointerDown.bind(this);
        this.onPointerMove = this.onPointerMove.bind(this);
        this.onPointerUp = this.onPointerUp.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
        this.onResize = this.onResize.bind(this);
      }
      
      connectedCallback() {
        this.slider.addEventListener('pointerdown', this.onPointerDown);
        this.slider.addEventListener('keydown', this.onKeyDown);
        window.addEventListener('resize', this.onResize);
        
        // Set initial position
        this.setPosition(50);
      }
      
      disconnectedCallback() {
        this.slider.removeEventListener('pointerdown', this.onPointerDown);
        document.removeEventListener('pointermove', this.onPointerMove);
        document.removeEventListener('pointerup', this.onPointerUp);
        this.slider.removeEventListener('keydown', this.onKeyDown);
        window.removeEventListener('resize', this.onResize);
      }
      
      onResize() {
        // Re-apply current position to ensure proper scaling
        const currentPosition = parseFloat(this.slider.getAttribute('aria-valuenow'));
        this.setPosition(currentPosition);
      }
      
      onPointerDown(e) {
        e.preventDefault();
        this.isDragging = true;
        this.wrapper.style.cursor = 'ew-resize';
        
        document.addEventListener('pointermove', this.onPointerMove);
        document.addEventListener('pointerup', this.onPointerUp);
        
        this.updatePosition(e);
      }
      
      onPointerMove(e) {
        if (!this.isDragging) return;
        this.updatePosition(e);
      }
      
      onPointerUp() {
        this.isDragging = false;
        this.wrapper.style.cursor = '';
        document.removeEventListener('pointermove', this.onPointerMove);
        document.removeEventListener('pointerup', this.onPointerUp);
      }
      
      onKeyDown(e) {
        const currentPosition = parseFloat(this.slider.getAttribute('aria-valuenow'));
        let newPosition = currentPosition;
        
        switch (e.key) {
          case 'ArrowLeft':
            newPosition = Math.max(0, currentPosition - 1);
            break;
          case 'ArrowRight':
            newPosition = Math.min(100, currentPosition + 1);
            break;
          case 'Home':
            newPosition = 0;
            break;
          case 'End':
            newPosition = 100;
            break;
          default:
            return;
        }
        
        e.preventDefault();
        this.setPosition(newPosition);
      }
      
      updatePosition(e) {
        const rect = this.wrapper.getBoundingClientRect();
        const position = ((e.clientX - rect.left) / rect.width) * 100;
        this.setPosition(position);
      }
      
      setPosition(position) {
        const clampedPosition = Math.min(100, Math.max(0, position));
        
        // Update slider position
        this.slider.style.left = `${clampedPosition}%`;
        
        // Update before image width
        this.beforeImage.style.width = `${clampedPosition}%`;
        
        // Update CSS variable for image scaling
        this.wrapper.style.setProperty('--clip-position', clampedPosition);
        
        // Update ARIA value
        this.slider.setAttribute('aria-valuenow', clampedPosition);
      }
    }
    
    customElements.define('image-comparison-{{ ai_gen_id }}', ImageComparison);
  })();
</script>

{% schema %}
{
  "name": "Before After Slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "range",
      "id": "aspect_ratio",
      "min": 40,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Aspect ratio",
      "default": 75
    },
    {
      "type": "color",
      "id": "placeholder_bg_color",
      "label": "Placeholder background color",
      "default": "#f4f4f4"
    },
    {
      "type": "header",
      "content": "Labels"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show labels",
      "default": true
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "range",
      "id": "label_position",
      "min": 5,
      "max": 95,
      "step": 5,
      "unit": "%",
      "label": "Label position",
      "default": 15
    },
    {
      "type": "range",
      "id": "label_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Label font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "label_opacity",
      "min": 0.5,
      "max": 1,
      "step": 0.1,
      "label": "Label opacity",
      "default": 0.8
    },
    {
      "type": "color",
      "id": "label_bg_color",
      "label": "Label background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_text_color",
      "label": "Label text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Slider"
    },
    {
      "type": "range",
      "id": "slider_width",
      "min": 1,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Slider width",
      "default": 2
    },
    {
      "type": "color",
      "id": "slider_color",
      "label": "Slider color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "handle_size",
      "min": 20,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Handle size",
      "default": 40
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Handle color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "handle_icon_color",
      "label": "Handle icon color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Before After Slider"
    }
  ]
}
{% endschema %}